// <auto-generated />
using System;
using BD2_projekt;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BD2_projekt.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("BD2_projekt.Cart", b =>
                {
                    b.Property<int>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UsersID")
                        .HasColumnType("INTEGER");

                    b.HasKey("CartID");

                    b.HasIndex("UsersID");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("BD2_projekt.CartElement", b =>
                {
                    b.Property<int>("CartElementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CartID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfProducts")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProductsID")
                        .HasColumnType("INTEGER");

                    b.HasKey("CartElementID");

                    b.HasIndex("CartID");

                    b.HasIndex("ProductsID");

                    b.ToTable("CartElements");
                });

            modelBuilder.Entity("BD2_projekt.Invoices", b =>
                {
                    b.Property<int>("InvoicesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomerUsersID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProductsID")
                        .HasColumnType("INTEGER");

                    b.HasKey("InvoicesID");

                    b.HasIndex("CustomerUsersID");

                    b.HasIndex("ProductsID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("BD2_projekt.OrderUnit", b =>
                {
                    b.Property<int>("OrderUnitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InvoicesID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfProducts")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProductsID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("unitPrice")
                        .HasColumnType("REAL");

                    b.HasKey("OrderUnitID");

                    b.HasIndex("InvoicesID");

                    b.HasIndex("ProductsID");

                    b.ToTable("OrderUnits");
                });

            modelBuilder.Entity("BD2_projekt.Products", b =>
                {
                    b.Property<int>("ProductsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeasureUnit")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("StoragePlacesID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("price")
                        .HasColumnType("REAL");

                    b.HasKey("ProductsID");

                    b.HasIndex("StoragePlacesID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("BD2_projekt.StoragePlaces", b =>
                {
                    b.Property<int>("StoragePlacesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Place")
                        .HasColumnType("TEXT");

                    b.Property<int>("Row")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Section")
                        .HasColumnType("TEXT");

                    b.HasKey("StoragePlacesID");

                    b.ToTable("StoragePlaces");
                });

            modelBuilder.Entity("BD2_projekt.Users", b =>
                {
                    b.Property<int>("UsersID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("NIP")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Password")
                        .HasMaxLength(500)
                        .HasColumnType("BLOB");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostCode")
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("UsersID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DistributorsProducts", b =>
                {
                    b.Property<int>("DistributedProductsProductsID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DistributorsUsersID")
                        .HasColumnType("INTEGER");

                    b.HasKey("DistributedProductsProductsID", "DistributorsUsersID");

                    b.HasIndex("DistributorsUsersID");

                    b.ToTable("DistributorsProducts");
                });

            modelBuilder.Entity("BD2_projekt.Customers", b =>
                {
                    b.HasBaseType("BD2_projekt.Users");

                    b.Property<string>("CardNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomersID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BD2_projekt.Distributors", b =>
                {
                    b.HasBaseType("BD2_projekt.Users");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .HasColumnType("TEXT");

                    b.Property<int>("DistributorsID")
                        .HasColumnType("INTEGER");

                    b.ToTable("Distributors");
                });

            modelBuilder.Entity("BD2_projekt.Cart", b =>
                {
                    b.HasOne("BD2_projekt.Users", "User")
                        .WithMany()
                        .HasForeignKey("UsersID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BD2_projekt.CartElement", b =>
                {
                    b.HasOne("BD2_projekt.Cart", null)
                        .WithMany("CartElements")
                        .HasForeignKey("CartID");

                    b.HasOne("BD2_projekt.Products", "Product")
                        .WithMany()
                        .HasForeignKey("ProductsID");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BD2_projekt.Invoices", b =>
                {
                    b.HasOne("BD2_projekt.Customers", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerUsersID");

                    b.HasOne("BD2_projekt.Products", null)
                        .WithMany("Invoices")
                        .HasForeignKey("ProductsID");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BD2_projekt.OrderUnit", b =>
                {
                    b.HasOne("BD2_projekt.Invoices", null)
                        .WithMany("OrderUnit")
                        .HasForeignKey("InvoicesID");

                    b.HasOne("BD2_projekt.Products", "Product")
                        .WithMany()
                        .HasForeignKey("ProductsID");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BD2_projekt.Products", b =>
                {
                    b.HasOne("BD2_projekt.StoragePlaces", "StoragePlace")
                        .WithMany()
                        .HasForeignKey("StoragePlacesID");

                    b.Navigation("StoragePlace");
                });

            modelBuilder.Entity("DistributorsProducts", b =>
                {
                    b.HasOne("BD2_projekt.Products", null)
                        .WithMany()
                        .HasForeignKey("DistributedProductsProductsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BD2_projekt.Distributors", null)
                        .WithMany()
                        .HasForeignKey("DistributorsUsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BD2_projekt.Customers", b =>
                {
                    b.HasOne("BD2_projekt.Users", null)
                        .WithOne()
                        .HasForeignKey("BD2_projekt.Customers", "UsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BD2_projekt.Distributors", b =>
                {
                    b.HasOne("BD2_projekt.Users", null)
                        .WithOne()
                        .HasForeignKey("BD2_projekt.Distributors", "UsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BD2_projekt.Cart", b =>
                {
                    b.Navigation("CartElements");
                });

            modelBuilder.Entity("BD2_projekt.Invoices", b =>
                {
                    b.Navigation("OrderUnit");
                });

            modelBuilder.Entity("BD2_projekt.Products", b =>
                {
                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
